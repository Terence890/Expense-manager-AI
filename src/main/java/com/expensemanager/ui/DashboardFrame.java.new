package com.expensemanager.ui;

import com.expensemanager.models.User;
import com.expensemanager.dao.ExpenseDAO;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ResourceBundle;
import java.util.Locale;

public class DashboardFrame extends JFrame {
    private final User currentUser;
    private final ExpenseDAO expenseDAO;
    private JPanel mainPanel;
    private JPanel chartPanel;
    private JPanel summaryPanel;
    private JPanel controlPanel;
    private boolean isDarkTheme = false;
    private final ResourceBundle messages;
    
    // Constants for styling
    private static final Color ACCENT_COLOR = new Color(64, 123, 255);
    private static final Color SUCCESS_COLOR = new Color(46, 204, 113);
    private static final Font REGULAR_FONT = new Font("Segoe UI", Font.PLAIN, 14);

    public DashboardFrame(User user) {
        this.currentUser = user;
        this.expenseDAO = new ExpenseDAO();
        this.messages = ResourceBundle.getBundle("messages", Locale.getDefault());
        
        setupFrame();
        initializeComponents();
        refreshDashboard();
        setVisible(true);
    }

    private void setupFrame() {
        setTitle(messages.getString("title") + " - " + currentUser.getUsername());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1200, 800);
        setLocationRelativeTo(null);
        setMinimumSize(new Dimension(1000, 700));
        
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void refreshUI() {
        SwingUtilities.invokeLater(() -> {
            try {
                setTitle(messages.getString("title") + " - " + currentUser.getUsername());
                UIManager.setLookAndFeel(isDarkTheme ? new FlatDarkLaf() : new FlatLightLaf());
                SwingUtilities.updateComponentTreeUI(this);
                refreshDashboard();
        } catch (Exception e) {
            e.printStackTrace();
            }
        });
    }

    private void addExpense() {
        JDialog dialog = new JDialog(this, messages.getString("addExpense"), true);
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(this);

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Amount field with currency symbol
        JPanel amountPanel = new JPanel(new BorderLayout(5, 0));
        amountPanel.setBackground(Color.WHITE);
        JLabel currencyLabel = new JLabel("$");
        currencyLabel.setFont(REGULAR_FONT);
        JTextField amountField = new JTextField(15);
        amountField.setFont(REGULAR_FONT);
        amountPanel.add(currencyLabel, BorderLayout.WEST);
        amountPanel.add(amountField, BorderLayout.CENTER);

        // Category combo
        JComboBox<String> categoryCombo = new JComboBox<>(messages.getString("categories").split(","));
        categoryCombo.setFont(REGULAR_FONT);

        // Description field
        JTextField descField = new JTextField(15);
        descField.setFont(REGULAR_FONT);

        // Layout components
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);

        addFormField(panel, "amount", amountPanel, gbc, 0);
        addFormField(panel, "category", categoryCombo, gbc, 1);
        addFormField(panel, "description", descField, gbc, 2);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);

        JButton saveButton = createStyledButton("save", ACCENT_COLOR);
        JButton cancelButton = createStyledButton("cancel", null);

        saveButton.addActionListener(e -> {
            // TODO: Save expense
            dialog.dispose();
            showSuccessMessage(messages.getString("expenseAdded"));
            refreshDashboard();
        });

        cancelButton.addActionListener(e -> dialog.dispose());

        buttonPanel.add(cancelButton);
        buttonPanel.add(saveButton);

        dialog.setLayout(new BorderLayout());
        dialog.add(panel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void viewExpenses() {
        JDialog dialog = new JDialog(this, messages.getString("viewExpenses"), true);
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);

        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Table
        String[] columns = {
            messages.getString("date"),
            messages.getString("category"),
            messages.getString("amount"),
            messages.getString("description")
        };
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable table = new JTable(model);
        table.setFont(REGULAR_FONT);
        table.setRowHeight(25);
        table.setShowGrid(false);
        
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        panel.add(scrollPane, BorderLayout.CENTER);

        // Close button
        JButton closeButton = createStyledButton("close", ACCENT_COLOR);
        closeButton.addActionListener(e -> dialog.dispose());
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.add(closeButton);
        
        dialog.add(panel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private void manageCategories() {
        JDialog dialog = new JDialog(this, messages.getString("categories"), true);
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(this);

        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Category list
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (String category : messages.getString("categories").split(",")) {
            listModel.addElement(category);
        }
        
        JList<String> categoryList = new JList<>(listModel);
        categoryList.setFont(REGULAR_FONT);
        categoryList.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        
        JScrollPane scrollPane = new JScrollPane(categoryList);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(230, 230, 230)));
        
        panel.add(scrollPane, BorderLayout.CENTER);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setBackground(Color.WHITE);
        
        JButton addButton = createStyledButton("add", ACCENT_COLOR);
        JButton closeButton = createStyledButton("close", null);
        
        buttonPanel.add(closeButton);
        buttonPanel.add(addButton);
        
        addButton.addActionListener(e -> {
            String newCategory = JOptionPane.showInputDialog(
                dialog,
                messages.getString("enterCategory"),
                messages.getString("addCategory"),
                JOptionPane.PLAIN_MESSAGE
            );
            if (newCategory != null && !newCategory.trim().isEmpty()) {
                listModel.addElement(newCategory.trim());
            }
        });
        
        closeButton.addActionListener(e -> dialog.dispose());
        
        dialog.add(panel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);
        dialog.setVisible(true);
    }

    private JButton createStyledButton(String key, Color bgColor) {
        JButton button = new JButton(messages.getString(key));
        button.setFont(REGULAR_FONT);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        if (bgColor != null) {
            button.setBackground(bgColor);
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.DARK_GRAY);
        }

        return button;
    }

    private void addFormField(JPanel panel, String labelKey, Component field, GridBagConstraints gbc, int row) {
        gbc.gridx = 0;
        gbc.gridy = row;
        JLabel label = new JLabel(messages.getString(labelKey) + ":");
        label.setFont(REGULAR_FONT);
        panel.add(label, gbc);

        gbc.gridx = 1;
        gbc.weightx = 1.0;
        panel.add(field, gbc);
        gbc.weightx = 0.0;
    }

    private void showSuccessMessage(String message) {
        JDialog dialog = new JDialog(this, "", true);
        dialog.setUndecorated(true);
        dialog.setBackground(new Color(0, 0, 0, 0));

        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBackground(SUCCESS_COLOR);
        panel.setBorder(new EmptyBorder(15, 25, 15, 25));

        JLabel label = new JLabel(message);
        label.setFont(REGULAR_FONT);
        label.setForeground(Color.WHITE);
        panel.add(label);

        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(this);

        // Use Swing Timer
        Timer timer = new Timer(2000, e -> dialog.dispose());
        timer.setRepeats(false);
        timer.start();

        dialog.setVisible(true);
    }

    public void refreshData() {
        refreshDashboard();
    }
} 